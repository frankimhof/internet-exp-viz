{"version":3,"sources":["LinePlotLog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["marginLeft","boundedWidth","width","boundedHeight","height","colors","dashes","strokeWidths","pointStyles","CustomLine","drawPoint","dataObject","lineIndex","color","strokeWidth","dashStyle","xScale","yScale","xAccessor","yAccessor","stdDevAccessor","pointStyle","showStdDeviation","lineString","d3","x","d","y","lineStringGenerator","data","x1","y1","x2","y2","stroke","fill","r","cx","cy","map","stdDev","mean","transform","strokeDasharray","fontSize","kexName","sigName","Axes","xTicks","yTicks","axesColor","tickLabelFontSize","value","offset","style","textAnchor","includes","Labels","xLabel","yLabel","labelColor","LinePlotLog","title","yDomain","chosenNumberOfAlgs","Set","e","size","useState","mouseXY","setMouseXY","isHovered","setIsHovered","domain","range","nice","ticks","className","backgroundColor","borderRadius","marginTop","fontWeight","invert","toFixed","styleModulo","marginBottom","onMouseEnter","onMouseLeave","onMouseMove","nativeEvent","layerX","layerY","allData","dataJSON","InternetExperimentPlots","showKems","setShowKems","setShowStdDeviation","showInfo","setShowInfo","availableRTTs","Array","from","filter","rtt_ms","sort","a","b","availableSIGs","availableKEMs","chosenRTTs","setChosenRTTs","chosenRTTs2","setChosenRTTs2","chosenSIGs","setChosenSIGs","chosenKEMs","setChosenKEMs","createMeanAndDeviationData","chosenRTTArray","length","name","selectedData","console","log","n","algDatasets","divisor","res","index","indexOf","dp","i","meanOfMedian_ms","reduce","accum","curr","median_ms","meanOfPercent95_ms","percent95_ms","fileSize_kb","sampleStdDevOfMedian","Math","sqrt","pow","sampleStdDevOfPercent95","meanAndVarianceData","meanAndVarianceData2","displayData","display","flexDirection","padding","margin","cursor","onClick","paddingRight","kemName","preventDefault","k","target","innerHTML","setTimeout","alignItems","rtt","Number","justifyContent","flexWrap","getMax","dArr","biggest","currValue","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e73538b.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport * as d3 from 'd3';\nimport {KexSigDataMean, MeanDataPoint} from './customtypes';\n\ntype TickType = {\n  value: number,\n  offset: number,\n}\n\ntype Props = {\n  title: string,\n  xLabel: string,\n  yLabel: string,\n  data: KexSigDataMean[],\n  xAccessor: (d:any)=>number,\n  yAccessor: (d:any)=>number,\n  yDomain: [number, number]\n  stdDevAccessor: (d:MeanDataPoint) =>number,\n  showStdDeviation: boolean,\n}\n\nconst width=650;\nconst height=550;\nconst marginLeft=100;\nconst marginRight=80;\nconst marginTop=80;\nconst marginBottom=80;\nconst boundedWidth=width-marginLeft-marginRight;\nconst boundedHeight=height-marginTop-marginBottom;\n//const colors = [\"#6497b1\", \"#ececa3\", \"#b5e550\", \"#607c3c\", \"#ffbaba\", \"#ff5252\", \"#f00\", \"#a70000\", \"#005b96\"]\n//const colors = [\"#648FFF\", \"#785EF0\", \"#DC267F\", \"#FE6102\", \"#FFB000\"];\n//const colors = [\"#c51b7d\", \"#4d9221\", \"#2166ac\", \"#8c510a\"]\n//const colors = [\"black\", \"red\", \"blue\", \"green\"];\nconst colors = [\"#DC267F\", \"#785EF0\", \"#FE6100\", \"black\"];\nconst dashes = [\"2 3\", \"12 4 2 4\", \"7 5\", \"0\"];\nconst strokeWidths = [2.5, 1.5, 2, 1];\ntype PointStyleType = \"skinCross\" | \"fatCross\" | \"circle\" | \"plus\"\nconst pointStyles:PointStyleType[] = [\"fatCross\", \"skinCross\", \"circle\", \"plus\"];\n\n\nconst LinePlotLog: React.FC<Props> = ({title, data, xLabel, yLabel, xAccessor, yAccessor, yDomain, stdDevAccessor, showStdDeviation}) =>{\n  const chosenNumberOfAlgs = new Set(data.map(e=>e.kexName+e.sigName)).size;\n  const [mouseXY, setMouseXY] = useState({x:0, y:0});\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleMouseMove = (e:React.MouseEvent<SVGGElement, MouseEvent>) => {\n    //@ts-ignore\n    setMouseXY({x: (e as MouseEvent).nativeEvent.layerX-marginLeft, y: (e as MouseEvent).nativeEvent.layerY-marginTop});\n    //setMouseXY(mouseXY=> ({...mouseXY, x: e.nativeEvent.layerX-marginLeft+5, y: e.nativeEvent.layerY-marginTop-15, yValue: yScale.invert(e.nativeEvent.layerY-marginTop)}))\n  }\n  const xScale:d3.ScaleLogarithmic<number, number> = d3.scaleLog().domain([1, 1000]) //web page sizes go from 1 to 1000 kb\n    .range([0, boundedWidth])\n  const yScale:d3.ScaleLinear<number, number> = d3.scaleLinear().domain(yDomain)\n    .range([boundedHeight, 0])\n    .nice()\n\n  const xTicks:TickType[] = xScale.ticks().map(value=>({\n      value,\n      offset: xScale(value)\n    } as TickType\n  ))\n\n  const yTicks:TickType[] = yScale.ticks().map((value)=>({\n      value,\n      offset: yScale(value)\n    } as TickType\n  ))\n\n  return(\n    <div className=\"plot\">\n      <svg style={{backgroundColor: \"white\", borderRadius: \"5px\"}} width={width} height={height}>\n        <text transform={`translate(${width*0.5}, ${marginTop*0.5})`} fill=\"black\" fontSize={30} fontWeight=\"bold\" textAnchor=\"middle\">\n          {`${title}`}\n        </text>\n        <g transform={`translate(${marginLeft}, ${marginTop})`}>\n          {isHovered &&\n            <g transform={`translate(${mouseXY.x}, ${mouseXY.y})`}>\n              <line x1={0} x2={0} y1={-30} y2={-5} style={{stroke:\"black\",strokeWidth:2}}/>\n              <text fill=\"black\" x={-10} y={-15} textAnchor=\"end\">{yScale.invert(mouseXY.y).toFixed(1)}ms</text>\n            </g>\n          }\n          <Labels yLabel={yLabel} xLabel={xLabel}/>\n          <Axes xTicks={xTicks as TickType[]} yTicks={yTicks as TickType[]}/>\n          {data.map((d:KexSigDataMean, lineIndex:number)=>{\n            const styleModulo = lineIndex<chosenNumberOfAlgs? lineIndex : lineIndex-chosenNumberOfAlgs;\n            return (\n            <CustomLine dataObject={d} \n              color={colors[styleModulo]} \n              dashStyle={dashes[styleModulo]}\n              pointStyle={pointStyles[styleModulo]}\n              strokeWidth={strokeWidths[styleModulo]}\n              xScale={xScale} yScale={yScale} xAccessor={xAccessor} yAccessor={yAccessor} stdDevAccessor={stdDevAccessor}\n              lineIndex={styleModulo}\n              showStdDeviation={showStdDeviation}\n            />\n          )})}\n        </g>\n        <rect transform={`translate(${marginLeft-10}, ${marginBottom-10})`} width={boundedWidth+20} height={boundedHeight+20} fill=\"transparent\"\n          onMouseEnter={()=>setIsHovered(true)} \n          onMouseLeave={()=>setIsHovered(false)}\n          onMouseMove={handleMouseMove}\n        />\n      </svg>\n    </div>\n  )\n}\n\ninterface LineProps {\n  dataObject:KexSigDataMean,\n  color: string,\n  strokeWidth: number,\n  dashStyle: string,\n  xScale: d3.ScaleLinear<number, number>,\n  yScale: d3.ScaleLinear<number, number>,\n  xAccessor: (d:any)=>number, \n  yAccessor: (d:any)=>number,\n  stdDevAccessor?: (d:any)=>number,\n  pointStyle: PointStyleType,\n  lineIndex: number,\n  showStdDeviation: boolean,\n}  \n\nconst CustomLine = ({dataObject, lineIndex, color, strokeWidth, dashStyle, xScale, yScale, xAccessor, yAccessor, stdDevAccessor, pointStyle, showStdDeviation}:LineProps) => {\n  //@ts-ignore\n  const lineStringGenerator = d3.line().x(d=>xScale(xAccessor(d))).y(d=>yScale(yAccessor(d)))\n  //@ts-ignore\n  const lineString = lineStringGenerator(dataObject.data);\n\n  let drawPoint:(x:number, y:number)=>JSX.Element;\n  switch(pointStyle){\n    case \"skinCross\":\n      drawPoint = (x, y)=>(\n        <>\n          <line x1={x+4.5} y1={y-3} x2={x-4.5} y2={y+3} strokeWidth={1.25} stroke={color} fill=\"transparent\"/>\n          <line x1={x+4.5} y1={y+3} x2={x-4.5} y2={y-3} strokeWidth={1.25} stroke={color} fill=\"transparent\"/>\n        </>\n      )\n      break;\n    case \"fatCross\":\n      drawPoint = (x, y)=>(\n        <>\n          <line x1={x-3} x2={x+3} y1={y-3} y2={y+3} stroke={color} strokeWidth={2.5} fill={\"transparent\"}/>\n          <line x1={x-3} x2={x+3} y1={y+3} y2={y-3} stroke={color} strokeWidth={2.5} fill={\"transparent\"}/>\n        </>\n      )\n      break;\n    case \"circle\":\n      drawPoint = (x, y)=><circle r={4} strokeWidth={1.5} stroke={color} cx={x} cy={y} fill=\"transparent\"></circle>\n      break;\n    case \"plus\":\n      drawPoint = (x, y)=>(<>\n        <line x1={x} x2={x} y1={y+5} y2={y-5} stroke={color} strokeWidth={1}/>\n        <line x1={x-5} x2={x+5} y1={y} y2={y} stroke={color} strokeWidth={1}/>\n      </>)\n      break;\n    default:\n      drawPoint = (x, y)=><circle r={4} fill={color} cx={x} cy={y}></circle>\n  }\n  const textHeight = 18; \n\n  return(\n    <>\n      {showStdDeviation &&\n        dataObject.data.map((d:MeanDataPoint)=>{\n          //@ts-ignore\n          const stdDev = stdDevAccessor(d);\n          //console.log(stdDev)\n          const mean = yAccessor(d);\n          //console.log(mean)\n          const x = xScale(xAccessor(d))\n          return (\n          <>\n            <line x1={x} x2={x} y1={yScale(mean+stdDev)} y2={yScale(mean-stdDev)} fill={\"none\"} stroke={color} strokeWidth={1}/>\n            <line x1={x-5} x2={x+5} y1={yScale(mean-stdDev)} y2={yScale(mean-stdDev)} fill={\"none\"} stroke={color} strokeWidth={1}/>\n            <line x1={x-5} x2={x+5} y1={yScale(mean+stdDev)} y2={yScale(mean+stdDev)} fill={\"none\"} stroke={color} strokeWidth={1}/>\n          </>\n        )})\n      }\n      <line transform={`translate(0, ${lineIndex*textHeight})`} y1={-5} y2={-5} x1={20} x2={70} stroke={color} strokeWidth={strokeWidth} strokeDasharray={dashStyle} fill={\"none\"}/>\n      {drawPoint(20, lineIndex*textHeight-5)}\n      {drawPoint(70, lineIndex*textHeight-5)}\n      <text y={lineIndex*textHeight} x={80} fontSize={textHeight} fill={color}>{dataObject.kexName} {dataObject.sigName}</text>\n      <path d={lineString} strokeWidth={strokeWidth} strokeDasharray={dashStyle} fill={\"none\"} stroke={color}/>\n      {\n        //@ts-ignore\n        dataObject.data.map((d:any)=>drawPoint(xScale(xAccessor(d)), yScale(yAccessor(d))))\n      }\n    </>\n  )\n}\n\nconst Axes = ({xTicks, yTicks}:{xTicks:TickType[], yTicks:TickType[]}) => {\n  const axesColor=\"black\";\n  const tickLabelFontSize = \"15px\";\n  return (\n  <>\n    <g transform={`translate(0, ${boundedHeight})`}>\n      <line x2={boundedWidth} stroke={axesColor}/>\n      {xTicks.map(({value, offset})=>(\n        <g key={value} transform={`translate(${offset}, 0)`}>\n          <line y2=\"6\" stroke={axesColor}/> \n          <text key={value} style={{fontSize: tickLabelFontSize, fill: `${axesColor}`, textAnchor:\"middle\", transform: \"translateY(20px)\"}}>{[1, 10, 100, 1000].includes(value)? value:\"\"}</text>\n        </g>\n      ))}\n    </g>\n    <g>\n      <line y2={boundedHeight} stroke={axesColor}/>\n      {yTicks.map(({value, offset})=>(\n        <g key={value} transform={`translate(0, ${offset})`}>\n          <line x2=\"-6\" stroke={axesColor}/> \n          <text key={value} style={{fontSize: tickLabelFontSize, fill: `${axesColor}`, textAnchor:\"end\", transform: \"translate(-10px,2px)\"}}>{value}</text>\n        </g>\n      ))}\n    </g>\n  </>\n)};\n\nconst Labels = ({xLabel, yLabel}:{xLabel: String, yLabel: String}) => {\n  const labelColor=\"black\";\n\n  return (\n  <>\n    <g style={{transform:`rotate(-90deg)`}}>\n      <text transform={`translate(${-boundedHeight*0.5}, ${-marginLeft*0.6})`} textAnchor={\"middle\"} fontSize={20} fill={labelColor}>{yLabel}</text>\n    </g>\n    <g transform={`translate(${boundedWidth*0.5}, ${boundedHeight+marginTop*0.6})`}>\n      <text textAnchor={\"middle\"} fill={labelColor} fontSize={20}>{xLabel}</text>\n    </g>\n  </>\n)}\n\n// data point as a star\n//    case 3:\n//      drawPoint = (x, y)=>(\n//        <>\n//          <line x1={x-3} x2={x+3} y1={y-3} y2={y+3} stroke={color} strokeWidth={1} fill={\"transparent\"}/>\n//          <line x1={x-3} x2={x+3} y1={y+3} y2={y-3} stroke={color} strokeWidth={1} fill={\"transparent\"}/>\n//          <line x1={x-4} x2={x+4} y1={y} y2={y} stroke={color} strokeWidth={1} fill={\"transparent\"}/>\n//          <line x1={x} x2={x} y1={y-4} y2={y+4} stroke={color} strokeWidth={1} fill={\"transparent\"}/>\n//        </>\n//      )\n//      break;\n//\nexport default LinePlotLog;\n","import React, {useState} from 'react';\nimport './App.css';\n\nimport dataJSON from './testresults/data.json';\n//import far from './testresults/near.json';\n//import worstcase from './testresults/near.json';\nimport LinePlotLog from './LinePlotLog';\n//const internetExpTestresults = [near, medium, far, worstcase];\nimport {KexSigData, KexSigDataMean, MeanDataPoint} from './customtypes';\n\nconst allData:KexSigData[] = dataJSON.map((d:any)=>d as KexSigData);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <h1>Internet Experiment Testresults</h1>\n        <InternetExperimentPlots/>\n      </div>\n  </div>\n  );\n}\n\nconst InternetExperimentPlots = () =>{\n  const [showKems, setShowKems] = useState(true);\n  const [showStdDeviation, setShowStdDeviation] = useState(false);\n  const [showInfo, setShowInfo] = useState(false);//info for displaying limit of four lines per graph\n\n  const availableRTTs = showKems?\n    Array.from(new Set(allData.filter((d:KexSigData)=>d.kexName!==\"prime256v1\").map((d:KexSigData)=>d.rtt_ms).sort((a,b)=>a-b)))\n  :\n    Array.from(new Set(allData.filter((d:KexSigData)=>d.sigName!==\"ecdsap256\").map((d:KexSigData)=>d.rtt_ms).sort((a,b)=>a-b)));\n\n  const availableSIGs = showKems? [\"ecdsap256\"] : Array.from(new Set(allData.filter((d:KexSigData)=>availableRTTs.includes(d.rtt_ms)).map((d:KexSigData)=>d.sigName).sort()));\n  const availableKEMs = showKems? Array.from(new Set(allData.map((d:KexSigData)=>d.kexName).sort())) : [\"prime256v1\"];\n   \n  const [chosenRTTs, setChosenRTTs] = useState<Number[]>([availableRTTs[0]])\n  const [chosenRTTs2, setChosenRTTs2] = useState<Number[]>([availableRTTs[0]])\n  const [chosenSIGs, setChosenSIGs] = useState<string[]>([\"ecdsap256\"])\n  const [chosenKEMs, setChosenKEMs] = useState<string[]>([\"prime256v1\"])\n\n  const toggleRTTs = (k:number) =>{\n    if(chosenRTTs.includes(k)){\n        setChosenRTTs(chosenRTTs.filter(d=>d!==k))\n    }\n    else{\n      setChosenRTTs([...chosenRTTs, k])\n    }\n  }\n\n  const toggleRTTs2 = (k:number) =>{\n    if(chosenRTTs2.includes(k)){\n        setChosenRTTs2(chosenRTTs2.filter(d=>d!==k))\n    }\n    else{\n      setChosenRTTs2([...chosenRTTs2, k])\n    }\n  }\n  const toggleKEMs = (k:string) =>{\n    if(chosenKEMs.includes(k)){\n        setChosenKEMs(chosenKEMs.filter(d=>d!==k))\n    }\n    else{\n      if(chosenKEMs.length !== 4) setChosenKEMs([...chosenKEMs, k])\n      else{\n        setShowInfo(true);\n        setTimeout(()=>setShowInfo(false), 1500);\n      }\n    }\n  }\n\n  const toggleSIGs = (k:string) =>{\n    if(chosenSIGs.includes(k)){\n        setChosenSIGs(chosenSIGs.filter(d=>d!==k))\n    }\n    else{\n      if(chosenSIGs.length !== 4) setChosenSIGs([...chosenSIGs, k])\n      else{\n        setShowInfo(true);\n        setTimeout(()=>setShowInfo(false), 1500);\n      }\n    }\n  }\n\n  const getIndex = (n:string) => (showKems? availableKEMs : availableSIGs).indexOf(n);\n  //if more than one dataset is selected, create one DataObject holding mean and sample standard deviation of all median and percent95 values\n  const createMeanAndDeviationData = (chosenRTTArray:Number[]):KexSigDataMean[] =>{\n\n  return chosenRTTArray.length===0? []:(showKems? chosenKEMs : chosenSIGs) \n    .map(name=>{\n      const selectedData = allData.filter((d:KexSigData)=> chosenRTTArray.includes(d.rtt_ms) && chosenSIGs.includes(d.sigName) && chosenKEMs.includes(d.kexName))// this was here before  && \n      console.log(selectedData)\n      const algDatasets = selectedData.filter((d:KexSigData)=>showKems? d.kexName===name:d.sigName===name);\n      const {kexName, sigName} = algDatasets[0];\n      const divisor = algDatasets.length>1? algDatasets.length-1 : 1;//prevent division by zero\n      const res = {index: getIndex(name), kexName, sigName, data: []} as KexSigDataMean;\n      res.data = algDatasets[0].data.map((dp, i)=>{\n        const meanOfMedian_ms = algDatasets.reduce((accum, curr)=>accum+curr.data[i].median_ms, 0)/algDatasets.length;\n        const meanOfPercent95_ms = algDatasets.reduce((accum, curr)=>accum+curr.data[i].percent95_ms, 0)/algDatasets.length;\n        return  {\n            fileSize_kb: dp.fileSize_kb, \n            meanOfMedian_ms,\n            meanOfPercent95_ms,\n            sampleStdDevOfMedian: Math.sqrt(algDatasets.reduce((accum, curr)=>accum+Math.pow(curr.data[i].median_ms-meanOfMedian_ms, 2), 0)/divisor),\n            sampleStdDevOfPercent95: Math.sqrt(algDatasets.reduce((accum, curr)=>accum+Math.pow(curr.data[i].percent95_ms-meanOfPercent95_ms, 2),0)/divisor)\n          } as MeanDataPoint\n      })\n      return res;\n    })\n  };\n  const meanAndVarianceData = createMeanAndDeviationData(chosenRTTs);\n  const meanAndVarianceData2 = createMeanAndDeviationData(chosenRTTs2);\n  console.log(meanAndVarianceData2)\n  const displayData:KexSigDataMean[] = [...meanAndVarianceData, ...meanAndVarianceData2];\n\n  return(\n    <>\n    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n      <div style={{padding: 0, margin: 0, cursor: \"pointer\"}} onClick={()=>{\n        setChosenRTTs([Array.from(new Set(allData.filter((d:KexSigData)=>d.kexName!==\"prime256v1\").map((d:KexSigData)=>d.rtt_ms).sort((a,b)=>a-b)))[0]])\n        setChosenRTTs2([Array.from(new Set(allData.filter((d:KexSigData)=>d.kexName!==\"prime256v1\").map((d:KexSigData)=>d.rtt_ms).sort((a,b)=>a-b)))[0]])\n        setShowKems(true);\n        setChosenKEMs([\"prime256v1\"])\n        setChosenSIGs([\"ecdsap256\"])\n      }}>\n        <h2 style={{paddingRight: \"10px\", color: showKems? \"lightblue\":\"#111\"}}>KEMs</h2>\n        </div>\n        <div style={{padding: 0, margin: 0, cursor: \"pointer\"}} onClick={()=>{\n          setChosenRTTs([Array.from(new Set(allData.filter((d:KexSigData)=>d.sigName!==\"ecdsap256\").map((d:KexSigData)=>d.rtt_ms).sort((a,b)=>a-b)))[0]])\n          setChosenRTTs2([Array.from(new Set(allData.filter((d:KexSigData)=>d.sigName!==\"ecdsap256\").map((d:KexSigData)=>d.rtt_ms).sort((a,b)=>a-b)))[0]])\n          setShowKems(false); \n          setChosenSIGs([\"ecdsap256\"])\n          setChosenKEMs([\"prime256v1\"])\n        }}>\n          <h2 style={{paddingRight: \"10px\", color: showKems? \"#111\":\"lightblue\"}}>SIGs</h2></div>\n    </div>\n      <div className={\"button-panel\"}>\n        {showKems &&\n        // Create Buttons for filtering data by Kex Name\n        //@ts-ignore \n          availableKEMs.map((kemName:string)=>(<div className={chosenKEMs.includes(kemName)? \"button-active button\" :\"button\"} onClick={(e:React.MouseEvent)=>{e.preventDefault(); return toggleKEMs(e.target.innerHTML)}}>{kemName}</div>))\n        }\n        {!showKems &&\n        // Create Buttons for filtering data by Sig Name\n        //@ts-ignore \n          availableSIGs.map((sigName:string)=>(<div className={chosenSIGs.includes(sigName)? \"button-active button\" :\"button\"} onClick={(e:React.MouseEvent)=>{e.preventDefault(); return toggleSIGs(e.target.innerHTML)}}>{sigName}</div>))\n        }\n      </div>\n      <h3>Create lines</h3>\n      <div>To create a line, select a dataset. Multiple selection will result in a line that displays mean and standard deviation of selected datasets.</div>\n      <div className={\"button-panel\"}>\n        <h3 style={{display: \"flex\", alignItems: \"center\", padding: 0, margin: 0}}>Line 1</h3>\n        {\n        // Create Buttons for filtering data by RTT \n        //@ts-ignore \n          availableRTTs.map((rtt:number)=>(<div className={chosenRTTs.includes(rtt)? \"button-active button\" : \"button\"} onClick={(e:React.MouseEvent)=>{e.preventDefault(); return toggleRTTs(Number(e.target.innerHTML))}}>{rtt}</div>))\n        }\n      </div>\n      <div className={\"button-panel\"}>\n        <h3 style={{display: \"flex\", alignItems: \"center\", padding: 0, margin: 0}}>Line 2</h3>\n        {\n        // Create Buttons for filtering data by RTT \n        //@ts-ignore \n          availableRTTs.map((rtt:number)=>(<div className={chosenRTTs2.includes(rtt)? \"button-active button\" : \"button\"} onClick={(e:React.MouseEvent)=>{e.preventDefault(); return toggleRTTs2(Number(e.target.innerHTML))}}>{rtt}</div>))\n        }\n      </div>\n      {showInfo && <h3 style={{color: \"red\"}}>Limited to 4 lines per graph</h3>}\n      <div style={{width: \"200px\"}} className={showStdDeviation? \"button-active button\" :\"button\"} onClick={()=>setShowStdDeviation(!showStdDeviation)}>Show Standard Deviation</div>\n      <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", flexWrap: \"wrap\"}}>\n        <LinePlotLog data={displayData}\n          title={`${showKems? \"Key Exchange\": \"Signatures\"} - Median`}\n          yLabel=\"Web page retrieval time (ms)\"\n          xLabel=\"Web page size (kB, log scale)\"\n          xAccessor={(d)=>d.fileSize_kb}\n          yAccessor={(d)=>d.meanOfMedian_ms}\n          stdDevAccessor={(d)=>d.sampleStdDevOfMedian}\n          yDomain={[0, getMax(displayData, (d)=>d.meanOfMedian_ms, showStdDeviation ? (d)=>d.sampleStdDevOfMedian:(d)=>0)]}\n          showStdDeviation={showStdDeviation}\n        />\n        <LinePlotLog data={displayData}\n          title={`${showKems? \"Key Exchange\": \"Signatures\"} - 95th Percentile`}\n          yLabel=\"Web page retrieval time (ms)\"\n          xLabel=\"Web page size (kB, log scale)\"\n          xAccessor={(d)=>d.fileSize_kb}\n          yAccessor={(d)=>d.meanOfPercent95_ms}\n          stdDevAccessor={(d)=>d.sampleStdDevOfPercent95}\n          yDomain={[0, getMax(displayData, (d)=>d.meanOfPercent95_ms, showStdDeviation? (d)=>d.sampleStdDevOfPercent95:(d)=>0)]}\n          showStdDeviation={showStdDeviation}\n        />\n        </div>\n    </>\n  )\n}\nconst getMax = (dArr:KexSigDataMean[], yAccessor:(d:any)=>number, stdDevAccessor:(d:any)=>number) => {\n  const allMaxValues = dArr.map((d)=>(\n    d.data.reduce((biggest, curr)=>{\n      const currValue = yAccessor(curr)+stdDevAccessor(curr);\n      return currValue>biggest? currValue:biggest;\n    }, 0)\n  ))\n  return allMaxValues.sort((a,b)=>a-b).slice(-1)[0]; \n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}